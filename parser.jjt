options {
	//retira o warning da tabela ascii
	//UNICODE_INPUT=true;
}

PARSER_BEGIN(Bibtex2Html)

	import java.io.FileInputStream;

	public class Bibtex2Html {
		public static void main(String args[]) throws ParseException {

			try {
				Bibtex2Html parser = new Bibtex2Html(new FileInputStream("bibtex.txt"));
				SimpleNode node = parser.Parse();
				node.dump("");
			} catch(java.io.FileNotFoundException e) {
          		System.out.println ("File not found.");
          		return;
        	}			
			
		}
	}

PARSER_END(Bibtex2Html)

SKIP :
{
	"\t" | "\r"
}

TOKEN :
{
	< LF : "\n" >
	| < WS: ([" ","\r","\t"])+ >
	| < OPEN_BRACKET : "{" >
	| < CLOSE_BRACKET : "}" >
	| < QUOTE : "\"" >
	| < EQUAL : "=" >
	| < COMMA : "," >
	

	| < ARTICLE : "@article" >
	| < BOOK : "@book" >
	| < BOOKLET : "@booklet" >
	| < CONFERENCE : "@conference" >
	| < INBOOK : "@inbook" >
	| < INCOLLECTION : "@incollection" >
	| < INPROCEEDINGS : "@inproceedings" >
	| < MANUAL : "@manual" >
	| < MASTERSTHESIS : "@mastersthesis" >
	| < MISC : "@misc" >
	| < PHDTHESIS : "@phdthesis" >
	| < PROCEEDINGS : "@proceedings" >
	| < TECHREPORT : "@techreport" >
	| < UNPUBLISHED : "@unpublished" >

	| < TITLE : "title" >
	| < AUTHOR : "author" >
	| < JOURNAL : "journal" >
	| < YEAR : "year" >
	| < VOLUME : "volume" >
	| < NUMBER : "number" >
	| < PAGES : "pages" >
	| < MONTH : "month" > 
	| < NOTE : "note" > 
	| < KEY : "key" >
	| < EDITOR : "editor" >
	| < PUBLISHER : "publisher" >
	| < SERIES : "series" >
	| < ADDRESS : "address" >
	| < EDITION : "edition" >
	| < HOWPUBLISHED : "howpublished" >
	| < CHAPTER : "chapter" > 
	| < TYPE : "type" >
	| < BOOKTITLE : "booktitle" >
	| < ORGANIZATION : "organization" >
	| < SCHOOL : "school" >
	| < INSTITUTION : "institution" >
	| < ANNOTE : "annote" >
	| < CROSSREF : "crossref" >

	| < INTEGER : (["-","+"])?(["0" - "9"])+ >
	| < PAGESNUMBERS : (["0" - "9"])+"--"(["0" - "9"])+ >
	| < WORD : (["a" - "z" , "A"-"Z" , "0" - "9", "-", ":"] | <SPECIAL>)+ >
	
	// \, 47 = / , u2018 = ‘ , u2019 = ’ , 126 = , u002E = . , 61 =  , u005E = ^
	| < SPECIAL : (["\\", "\47", "\u2018", "\u2019", "\126", "\u002E", "\61", "\u005E" ])+ >
	| < STRING : ((<WORD>)+((" "|", ")+<WORD>)*)+ >
	| < BETWEENBRACKETS : ( <OPEN_BRACKET> (<WORD>|<STRING>)* <CLOSE_BRACKET> )+ >

	| < TEXT : (
		( <STRING> | <WORD> | <WS> )+ ( <BETWEENBRACKETS> )+ ( <STRING> | <WORD>  | <WS> )+
		)+  >

}

SimpleNode Parse(): {}{
	(Article()
		|Book()
		) <LF> {return jjtThis;}
}

void Article(): {} {
	<ARTICLE>
	Contents()
}

void Book(): {} {
	<BOOK>
	Contents()
}


void Contents(): {}{
	<OPEN_BRACKET>
		Id() [<WS>] <COMMA> <LF>
		(
				Title()
				| Author()
				| Journal()
				| Volume()
				| Number()
				| Pages()
				| Year()
				| Publisher()
				| Month()
		)

		(
			[<WS>]
			(
				 <COMMA> <LF>
				| Title()
				| Author()
				| Journal()
				| Volume()
				| Number()
				| Pages()
				| Year()
				| Publisher()
				| Month()
			)
		)*
		[<LF>]
	<CLOSE_BRACKET>
}


void Id(): {Token id = null;} {
	(id = <WORD> | id = <STRING>)
	{ System.out.println("id=" + id.image); }
}


/* * * * * * * * * * * *
 * TITLE               * 
 * * * * * * * * * * * */

void Title(): {Token title = null;} {
	<TITLE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
			(title = <WORD> | title = <STRING> | title = <TEXT>)
			[<WS>] <CLOSE_BRACKET>
		| (title = <WORD> | title = <STRING> | title = <TEXT>)[<WS>]
		| title = btwBrackets()
	)
	{ System.out.println("title=" + title.image); }
}

void Month(): { Token month = null;} {
	<MONTH> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(month = <INTEGER> )
		[<WS>] <CLOSE_BRACKET>
		| (month = <INTEGER>) [<WS>]
	)
	{ System.out.println("month=" + month.image); }
}

/*
First
Last
von
jr

First von Last
von Last, First
von Last, Jr ,First
*/
void Author(): {Token author = null;} {
	<AUTHOR> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(author =  <WORD> | author = <STRING> | author = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| 
		(author =  <WORD> | author = <STRING> | author = <TEXT>)[<WS>]
		|
		author = btwBrackets()
	)
	{ System.out.println("author=" + author.image); }
}

void Journal(): {Token journal = null;} {
	<JOURNAL> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(journal = <WORD> | journal = <STRING> | journal = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| (journal = <WORD> | journal = <STRING> | journal = <TEXT>) [<WS>]
		| journal = btwBrackets()
	)
	{ System.out.println("journal=" + journal.image); }
}

void Year(): {Token year = null;} {
	<YEAR> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] year = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| year = <INTEGER> [<WS>]
		| year = btwBrackets()
	)
	{ System.out.println("year=" + year.image); }
}

void Volume(): {Token volume = null;} {
	<VOLUME> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] volume = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| volume = <INTEGER> [<WS>]
		| volume = btwBrackets()
	)
	{ System.out.println("volume=" + volume.image); }
}

void Pages(): {Token pages = null;} {

	<PAGES> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] pages = <PAGESNUMBERS> [<WS>] <CLOSE_BRACKET>
		| pages = <PAGESNUMBERS> [<WS>]
		| pages = btwBrackets()
	)
	{ System.out.println("pages=" + pages.image); }
}

void Number(): {Token number = null;} {
	<NUMBER> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] number = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| number = <INTEGER> [<WS>]
		| number = btwBrackets()
	)
	{ System.out.println("number=" + number.image); }
}

void Publisher(): {Token publisher = null;} {
	<PUBLISHER> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( publisher = <WORD> | publisher = <STRING> | publisher = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( publisher =  <WORD> | publisher = <STRING> | publisher = <TEXT>) [<WS>]
		| publisher = btwBrackets()
	)
	{ System.out.println("publisher=" + publisher.image); }
}

void Note(): {Token note = null;} {
	<NOTE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( note = <WORD> | note = <STRING> | note = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( note =  <WORD> | note = <STRING> | note = <TEXT>) [<WS>]
		| note = btwBrackets()
	)
	{ System.out.println("note=" + note.image); }
}

/*
void getText(): {} {
	<STRING> [<OPEN_BRACKET>(<STRING>|<WORD>)<CLOSE_BRACKET>]
}
*/

Token btwBrackets(): {} {
	{Token t = new Token();}
	t = <BETWEENBRACKETS>
	{return t;}
}