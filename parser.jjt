PARSER_BEGIN(Bibtex2Html)

	import java.io.FileInputStream;

	public class Bibtex2Html {
		public static void main(String args[]) throws ParseException {

			try {
				Bibtex2Html parser = new Bibtex2Html(new FileInputStream("bibtex.txt"));
				SimpleNode node = parser.Parse();
				node.dump("");
			} catch(java.io.FileNotFoundException e) {
          		System.out.println ("File not found.");
          		return;
        	}			
			
		}
	}

PARSER_END(Bibtex2Html)

SKIP :
{
	"\t" | "\r"
}

TOKEN :
{
	< LF : "\n" >
	| < WS: ([" ","\r","\t"])+ >
	| < OPEN_BRACKET : "{" >
	| < CLOSE_BRACKET : "}" >
	| < QUOTE : "\"" >
	| < EQUAL : "=" >
	| < COMMA : "," >
	

	| < ARTICLE : "@article" >
	| < BOOK : "@book" >
	| < BOOKLET : "@booklet" >
	| < CONFERENCE : "@conference" >
	| < INBOOK : "@inbook" >
	| < INCOLLECTION : "@incollection" >
	| < INPROCEEDINGS : "@inproceedings" >
	| < MANUAL : "@manual" >
	| < MASTERSTHESIS : "@mastersthesis" >
	| < MISC : "@misc" >
	| < PHDTHESIS : "@phdthesis" >
	| < PROCEEDINGS : "@proceedings" >
	| < TECHREPORT : "@techreport" >
	| < UNPUBLISHED : "@unpublished" >

	| < TITLE : "title" >
	| < AUTHOR : "author" >
	| < JOURNAL : "journal" >
	| < YEAR : "year" >
	| < VOLUME : "volume" >
	| < NUMBER : "number" >
	| < PAGES : "pages" >
	| < MONTH : "month" > 
	| < NOTE : "note" > 
	| < KEY : "key" >
	| < EDITOR : "editor" >
	| < PUBLISHER : "publisher" >
	| < SERIES : "series" >
	| < ADDRESS : "address" >
	| < EDITION : "edition" >
	| < HOWPUBLISHED : "howpublished" >
	| < CHAPTER : "chapter" > 
	| < TYPE : "type" >
	| < BOOKTITLE : "booktitle" >
	| < ORGANIZATION : "organization" >
	| < SCHOOL : "school" >
	| < INSTITUTION : "institution" >
	| < ANNOTE : "annote" >
	| < CROSSREF : "crossref" >

	| < INTEGER : (["0" - "9"])+ >
	| < PAGESNUMBERS : (["0" - "9"])+"--"(["0" - "9"])+ >
	| < WORD : (["a" - "z" , "A"-"Z" , "0" - "9", "-", ":"] | <SPECIAL>)+ >
	| < SPECIAL : (["\\", "\/", "\u2018", "\u2019", "\126", "\46", "\61", "\u005E"])+ >
	| < STRING : ((<WORD>)+(" "<WORD>)*)+ >
	//| < TEXT : (["a" - "z" , "A"-"Z" , "0" - "9", " ", "-", ":"])

}

SimpleNode Parse(): {}{
	Article() <LF> {return jjtThis;}
}

void Article(): {} {
	<ARTICLE>
	<OPEN_BRACKET>
		(
			[<WS>]
			(
				Id() <COMMA> <LF>
				| Title() <COMMA> <LF>
				| Author() <COMMA> <LF>
				| Journal() <COMMA> <LF>
				| Volume() <COMMA> <LF>
				| Number() <COMMA> <LF>
				| Pages() <COMMA> <LF>
				| Year() <COMMA> <LF>
				| Publisher() <COMMA> <LF>
				| Month() <COMMA> <LF>
			)
		)+
		
	<CLOSE_BRACKET>
}

void Id(): {Token id = null;} {
	(id = <WORD> | id = <STRING>)
	{ System.out.println("id=" + id.image); }
}

void Title(): {Token title = null;} {
	<TITLE> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>]
		(title = <WORD> | title = <STRING>)
		[<WS>] <CLOSE_BRACKET>
		| (title = <WORD> | title = <STRING>)[<WS>]
	)
	{ System.out.println("title=" + title.image); }
}

void Month(): { Token month = null;} {
	<MONTH> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>]
		(month = <INTEGER> )
		[<WS>] <CLOSE_BRACKET>
		| (month = <INTEGER>) [<WS>]
	)
	{ System.out.println("month=" + month.image); }
}

void Author(): {Token author = null;} {
	<AUTHOR> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>]
		(author =  <WORD> | author = <STRING>)
		[<WS>] <CLOSE_BRACKET>
		| (author =  <WORD> | author = <STRING>)[<WS>]
	)
	{ System.out.println("author=" + author.image); }
}

void Journal(): {Token journal = null;} {
	<JOURNAL> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>]
		(journal = <WORD> | journal = <STRING>)
		[<WS>] <CLOSE_BRACKET>
		| (journal = <WORD> | journal = <STRING>) [<WS>]
	)
	{ System.out.println("journal=" + journal.image); }
}

void Year(): {Token year = null;} {
	<YEAR> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>] year = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| year = <INTEGER> [<WS>]
	)
	{ System.out.println("year=" + year.image); }
}

void Volume(): {Token volume = null;} {
	<VOLUME> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>] volume = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| volume = <INTEGER> [<WS>]
	)
	{ System.out.println("volume=" + volume.image); }
}

void Pages(): {Token pages = null;} {

	<PAGES> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>] pages = <PAGESNUMBERS> [<WS>] <CLOSE_BRACKET>
		| pages = <PAGESNUMBERS> [<WS>]
	)
	{ System.out.println("pages=" + pages.image); }
}

void Number(): {Token number = null;} {
	<NUMBER> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>] number = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| number = <INTEGER> [<WS>]
	)
	{ System.out.println("number=" + number.image); }
}

void Publisher(): {Token publisher = null;} {
	<PUBLISHER> SpacedEqual()
	(
		<OPEN_BRACKET> [<WS>]
		( publisher = <WORD> | publisher = <STRING>)
		[<WS>] <CLOSE_BRACKET>
		| ( publisher =  <WORD> | publisher = <STRING>) [<WS>]
	)
	{ System.out.println("publisher=" + publisher.image); }
}

void SpacedEqual():{} {
	[<WS>] <EQUAL> [<WS>]
}