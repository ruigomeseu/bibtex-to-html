options {
	UNICODE_INPUT=true;
	LOOKAHEAD=1;
}

PARSER_BEGIN(Bibtex2Html)

	import java.io.FileInputStream;

	public class Bibtex2Html {
		public static void main(String args[]) throws ParseException {

			try {
				Bibtex2Html parser = new Bibtex2Html(new FileInputStream("bibtex.txt"));
				SimpleNode node = parser.Parse();
				node.dump("");
				System.out.println("Type = " + node.type);
			} catch(java.io.FileNotFoundException e) {
          		System.out.println ("File not found.");
          		return;
        	}			
			
		}
	}

PARSER_END(Bibtex2Html)

SKIP :
{
	"\t" | "\r"
}

TOKEN :
{
	< LF : "\n" >
	| < WS: ([" ","\r","\t"])+ >
	| < OPEN_BRACKET : "{" >
	| < CLOSE_BRACKET : "}" >
	| < QUOTE : "\"" >
	| < EQUAL : "=" >
	| < COMMA : "," >
	

	| < ARTICLE : "@article" >
	| < BOOK : "@book" >
	| < BOOKLET : "@booklet" >
	| < CONFERENCE : "@conference" >
	| < INBOOK : "@inbook" >
	| < INCOLLECTION : "@incollection" >
	| < INPROCEEDINGS : "@inproceedings" >
	| < MANUAL : "@manual" >
	| < MASTERSTHESIS : "@mastersthesis" >
	| < MISC : "@misc" >
	| < PHDTHESIS : "@phdthesis" >
	| < PROCEEDINGS : "@proceedings" >
	| < TECHREPORT : "@techreport" >
	| < UNPUBLISHED : "@unpublished" >

	| < TITLE : "title" >
	| < AUTHOR : "author" >
	| < JOURNAL : "journal" >
	| < YEAR : "year" >
	| < VOLUME : "volume" >
	| < NUMBER : "number" >
	| < PAGES : "pages" >
	| < MONTH : "month" > 
	| < NOTE : "note" > 
	| < KEY : "key" >
	| < EDITOR : "editor" >
	| < PUBLISHER : "publisher" >
	| < SERIES : "series" >
	| < ADDRESS : "address" >
	| < EDITION : "edition" >
	| < HOWPUBLISHED : "howpublished" >
	| < CHAPTER : "chapter" > 
	| < TYPE : "type" >
	| < BOOKTITLE : "booktitle" >
	| < ORGANIZATION : "organization" >
	| < SCHOOL : "school" >
	| < INSTITUTION : "institution" >
	| < ANNOTE : "annote" >
	| < CROSSREF : "crossref" >

	| < INTEGER : (["-","+"])?(["0" - "9"])+ >
	| < PAGESNUMBERS : (["0" - "9"])+"--"(["0" - "9"])+ >
	| < WORD : (["a" - "z" , "A"-"Z" , "0" - "9", "-", ":"] | <SPECIAL>)+ >
	
	// \, 47 = / , u2018 = ‘ , u2019 = ’ , 126 = , u002E = . , 61 =  , u005E = ^
	| < SPECIAL : (["\\", "\47", "\u2018", "\u2019", "\126", "\u002E", "\61", "\u005E" ])+ >
	| < STRING : ((<WORD>)+((" "|", ")+<WORD>)*)+ >
	| < BETWEENBRACKETS : ( <OPEN_BRACKET> (<WORD>|<STRING>)* <CLOSE_BRACKET> )+ >

	| < TEXT : (
		( <STRING> | <WORD> | <WS> )+ ( <BETWEENBRACKETS> )+ ( <STRING> | <WORD>  | <WS> )+
		)+  >

}

SimpleNode Parse(): {}{
	(	Article()
		| Book()
		| Booklet()
		| Conference()
		| Inbook()
		| Incollection()
		| Inproceedings()
		| Manual() 
		| Mastersthesis()
		| Misc()
		| Phdthesis()
		| Proceedings()
		| Techreport()
		| Unpublished();
	)
	Contents()
	<LF>
	{ return jjtThis;}
}

void Article() {
	<ARTICLE> { jjtThis.type = "article"; }
}

void Book() {
	<BOOK> { jjtThis.type = "book"; }
}
void Booklet() {
	<BOOKLET> { jjtThis.type = "booklet"; }
}

void Conference() {
	<CONFERENCE> { jjtThis.type = "conference"; }
}

void Inbook() {
	<INBOOK> { jjtThis.type = "inbook"; }
}

void Incollection() {
	<INCOLLECTION> { jjtThis.type = "incollection"; }
}

void Inproceedings() {
	<INPROCEEDINGS> { jjtThis.type = "inproceedings"; }
}

void Manual() {
	<MANUAL> { jjtThis.type = "manual"; }
}

void Mastersthesis() {
	 <MASTERSTHESIS> { jjtThis.type = "mastersthesis"; }
}

void Misc() {
	<MISC> { jjtThis.type = "misc"; }
}
void Phdthesis() {
	<PHDTHESIS> { jjtThis.type = "phdthesis"; }
}

void Proceedings() {
	<PROCEEDINGS> { jjtThis.type = "proceedings"; }
}

void Techreport() {
	<TECHREPORT> { jjtThis.type = "techreport"; }
}

void Unpublished() {
	<UNPUBLISHED> { jjtThis.type = "unpublished"; }
}

void Contents(): {}{
	<OPEN_BRACKET>
		Id()
		(
			[<WS>]
			(
				 <COMMA> <LF>
				| Property()
			)
		)*
		[<LF>]
	<CLOSE_BRACKET>
}

void Property(): {} {
	(	Title()
		| Author()
		| Journal()
		| Volume()
		| Number()
		| Pages()
		| Year()
		| Publisher()
		| Month()
		| Note()
		| Key()
		| Editor()
		| Series()
		| Address()
		| Edition()
		| HowPublished()
		| Chapter()
		| Type()
		| BookTitle()
		| Organization()
		| School()
		| Institution()
		| Annote()
		| Crossref()
	)
}


void Id(): {Token id = null;} {
	(id = <WORD> | id = <STRING>)
	{ System.out.println("id=" + id.image); }
}


/* * * * * * * * * * * *
 * TITLE               * 
 * * * * * * * * * * * */

void Title(): {Token title = null;} {
	<TITLE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
			(title = <WORD> | title = <STRING> | title = <TEXT>)
			[<WS>] <CLOSE_BRACKET>
		| (title = <WORD> | title = <STRING> | title = <TEXT>)[<WS>]
		| title = btwBrackets()
	)
	{ System.out.println("title=" + title.image); }
}

void Month(): { Token month = null;} {
	<MONTH> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(month = <INTEGER> )
		[<WS>] <CLOSE_BRACKET>
		| (month = <INTEGER>) [<WS>]
	)
	{ System.out.println("month=" + month.image); }
}

/*
First
Last
von
jr

First von Last
von Last, First
von Last, Jr ,First
*/
void Author(): {Token author = null;} {
	<AUTHOR> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(author =  <WORD> | author = <STRING> | author = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| 
		(author =  <WORD> | author = <STRING> | author = <TEXT>)[<WS>]
		|
		author = btwBrackets()
	)
	{ System.out.println("author=" + author.image); }
}

void Journal(): {Token journal = null;} {
	<JOURNAL> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(journal = <WORD> | journal = <STRING> | journal = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| (journal = <WORD> | journal = <STRING> | journal = <TEXT>) [<WS>]
		| journal = btwBrackets()
	)
	{ System.out.println("journal=" + journal.image); }
}

void Year(): {Token year = null;} {
	<YEAR> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] year = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| year = <INTEGER> [<WS>]
		| year = btwBrackets()
	)
	{ System.out.println("year=" + year.image); }
}

void Volume(): {Token volume = null;} {
	<VOLUME> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] volume = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| volume = <INTEGER> [<WS>]
		| volume = btwBrackets()
	)
	{ System.out.println("volume=" + volume.image); }
}

void Pages(): {Token pages = null;} {

	<PAGES> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] pages = <PAGESNUMBERS> [<WS>] <CLOSE_BRACKET>
		| pages = <PAGESNUMBERS> [<WS>]
		| pages = btwBrackets()
	)
	{ System.out.println("pages=" + pages.image); }
}

void Number(): {Token number = null;} {
	<NUMBER> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] number = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| number = <INTEGER> [<WS>]
		| number = btwBrackets()
	)
	{ System.out.println("number=" + number.image); }
}

void Publisher(): {Token publisher = null;} {
	<PUBLISHER> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( publisher = <WORD> | publisher = <STRING> | publisher = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( publisher =  <WORD> | publisher = <STRING> | publisher = <TEXT>) [<WS>]
		| publisher = btwBrackets()
	)
	{ System.out.println("publisher=" + publisher.image); }
}

void Note(): {Token note = null;} {
	<NOTE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( note = <WORD> | note = <STRING> | note = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( note =  <WORD> | note = <STRING> | note = <TEXT>) [<WS>]
		| note = btwBrackets()
	)
	{ System.out.println("note=" + note.image); }
}

void Key(): { Token key = null; } {
	<KEY> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( key = <WORD> | key = <STRING> | key = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( key =  <WORD> | key = <STRING> | key = <TEXT>) [<WS>]
		| key = btwBrackets()
	)
	{ System.out.println("key=" + key.image); }
}

void Editor(): { Token editor = null; } {
	<EDITOR> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( editor = <WORD> | editor = <STRING> | editor = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( editor =  <WORD> | editor = <STRING> | editor = <TEXT>) [<WS>]
		| editor = btwBrackets()
	)
	{ System.out.println("editor=" + editor.image); }
}

void Series(): { Token series = null; } {
	<SERIES> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( series = <WORD> | series = <STRING> | series = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( series =  <WORD> | series = <STRING> | series = <TEXT>) [<WS>]
		| series = btwBrackets()
	)
	{ System.out.println("series=" + series.image); }
}

void Address(): { Token address = null; } {
	<ADDRESS> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( address = <WORD> | address = <STRING> | address = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( address =  <WORD> | address = <STRING> | address = <TEXT>) [<WS>]
		| address = btwBrackets()
	)
	{ System.out.println("address=" + address.image); }
}

void Edition(): { Token edition = null; } {
	<EDITION> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( edition = <WORD> | edition = <STRING> | edition = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( edition =  <WORD> | edition = <STRING> | edition = <TEXT>) [<WS>]
		| edition = btwBrackets()
	)
	{ System.out.println("edition=" + edition.image); }
}

void HowPublished(): { Token howPublished = null; } {
	<HOWPUBLISHED> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( howPublished = <WORD> | howPublished = <STRING> | howPublished = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( howPublished =  <WORD> | howPublished = <STRING> | howPublished = <TEXT>) [<WS>]
		| howPublished = btwBrackets()
	)
	{ System.out.println("howPublished=" + howPublished.image); }
}

void Chapter(): { Token chapter = null; } {
	<CHAPTER> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( chapter = <WORD> | chapter = <STRING> | chapter = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( chapter =  <WORD> | chapter = <STRING> | chapter = <TEXT>) [<WS>]
		| chapter = btwBrackets()
	)
	{ System.out.println("chapter=" + chapter.image); }
}

void Type(): { Token type = null; } {
	<TYPE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( type = <WORD> | type = <STRING> | type = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( type =  <WORD> | type = <STRING> | type = <TEXT>) [<WS>]
		| type = btwBrackets()
	)
	{ System.out.println("type=" + type.image); }
}

void BookTitle(): { Token bookTitle = null; } {
	<BOOKTITLE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( bookTitle = <WORD> | bookTitle = <STRING> | bookTitle = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( bookTitle =  <WORD> | bookTitle = <STRING> | bookTitle = <TEXT>) [<WS>]
		| bookTitle = btwBrackets()
	)
	{ System.out.println("bookTitle=" + bookTitle.image); }
}

void Organization(): { Token organization = null; } {
	<ORGANIZATION> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( organization = <WORD> | organization = <STRING> | organization = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( organization =  <WORD> | organization = <STRING> | organization = <TEXT>) [<WS>]
		| organization = btwBrackets()
	)
	{ System.out.println("organization=" + organization.image); }
}

void School(): { Token school = null; } {
	<SCHOOL> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( school = <WORD> | school = <STRING> | school = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( school =  <WORD> | school = <STRING> | school = <TEXT>) [<WS>]
		| school = btwBrackets()
	)
	{ System.out.println("school=" + school.image); }
}

void Institution(): { Token institution = null; } {
	<INSTITUTION> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( institution = <WORD> | institution = <STRING> | institution = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( institution =  <WORD> | institution = <STRING> | institution = <TEXT>) [<WS>]
		| institution = btwBrackets()
	)
	{ System.out.println("institution=" + institution.image); }
}

void Annote(): { Token annote = null; } {
	<ANNOTE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( annote = <WORD> | annote = <STRING> | annote = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( annote =  <WORD> | annote = <STRING> | annote = <TEXT>) [<WS>]
		| annote = btwBrackets()
	)
	{ System.out.println("annote=" + annote.image); }
}

void Crossref(): { Token crossref = null; } {
	<CROSSREF> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( crossref = <WORD> | crossref = <STRING> | crossref = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( crossref =  <WORD> | crossref = <STRING> | crossref = <TEXT>) [<WS>]
		| crossref = btwBrackets()
	)
	{ System.out.println("crossref=" + crossref.image); }
}



/*
void getText(): {} {
	<STRING> [<OPEN_BRACKET>(<STRING>|<WORD>)<CLOSE_BRACKET>]
}
*/

Token btwBrackets(): {} {
	{Token t = new Token();}
	t = <BETWEENBRACKETS>
	{return t;}
}