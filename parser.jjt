PARSER_BEGIN(Bibtex2Html)

	import java.io.FileInputStream;

	public class Bibtex2Html {
		public static void main(String args[]) throws ParseException {

			try {
				Bibtex2Html parser = new Bibtex2Html(new FileInputStream("bibtex.txt"));
				SimpleNode node = parser.Parse();
				node.dump("");
			} catch(java.io.FileNotFoundException e) {
          		System.out.println ("File not found.");
          		return;
        	}			
			
		}
	}

PARSER_END(Bibtex2Html)

SKIP :
{
	" " | "\t" | "\r"
}

TOKEN :
{
	< LF : "\n" >
	| < OPEN_BRACKET : "{" >
	| < CLOSE_BRACKET : "}" >
	| < QUOTE : "\"" >
	| < EQUAL : "=" >
	| < COMMA : "," >

	| < ARTICLE : "@article" >
	| < BOOK : "@book" >
	| < BOOKLET : "@booklet" >
	| < CONFERENCE : "@conference" >
	| < INBOOK : "@inbook" >
	| < INCOLLECTION : "@incollection" >
	| < INPROCEEDINGS : "@inproceedings" >
	| < MANUAL : "@manual" >
	| < MASTERSTHESIS : "@mastersthesis" >
	| < MISC : "@misc" >
	| < PHDTHESIS : "@phdthesis" >
	| < PROCEEDINGS : "@proceedings" >
	| < TECHREPORT : "@techreport" >
	| < UNPUBLISHED : "@unpublished" >

	| < TITLE : "title" >
	| < AUTHOR : "author" >
	| < JOURNAL : "journal" >
	| < YEAR : "year" >
	| < VOLUME : "volume" >
	| < NUMBER : "number" >
	| < PAGES : "pages" >
	| < MONTH : "month" > 
	| < NOTE : "note" > 
	| < KEY : "key" >
	| < EDITOR : "editor" >
	| < PUBLISHER : "publisher" >
	| < SERIES : "series" >
	| < ADDRESS : "address" >
	| < EDITION : "edition" >
	| < HOWPUBLISHED : "howpublished" >
	| < CHAPTER : "chapter" > 
	| < TYPE : "type" >
	| < BOOKTITLE : "booktitle" >
	| < ORGANIZATION : "organization" >
	| < SCHOOL : "school" >
	| < INSTITUTION : "institution" >
	| < ANNOTE : "annote" >
	| < CROSSREF : "crossref" >
	| < INTEGER : (["0" - "9"])+ >
	| < STRING : (["a" - "z" , "A"-"Z" , "0" - "9", " "])+ >
}

SimpleNode Parse(): {}{
	Article() <LF> {return jjtThis;}
}

void Article(): {} {
	<ARTICLE>
	<OPEN_BRACKET>
		Id() <COMMA> <LF>
		Title() <COMMA> <LF>
		Author() <COMMA> <LF>
		Journal() <COMMA> <LF>
		Volume() <COMMA> <LF>
		Number() <COMMA> <LF>
		Pages() <COMMA> <LF>
		Year() <COMMA> <LF>
		Publisher() <COMMA> <LF>
	<CLOSE_BRACKET>
}

void Id(): {Token id = null;} {
	id = <STRING>
	{ System.out.println("id=" + id.image); }
}

void Title(): {Token title = null;} {
	<TITLE><EQUAL><OPEN_BRACKET>
	title = <STRING>
	<CLOSE_BRACKET>
	{ System.out.println("title=" + title.image); }
}

void Author(): {Token author = null;} {
	<AUTHOR><EQUAL><OPEN_BRACKET>
	author = <STRING>
	<CLOSE_BRACKET>
	{ System.out.println("author=" + author.image); }
}

void Journal(): {Token journal = null;} {
	<JOURNAL><EQUAL><OPEN_BRACKET>
	journal = <STRING>
	<CLOSE_BRACKET>
	{ System.out.println("journal=" + journal.image); }
}

void Year(): {Token year = null;} {
	<YEAR><EQUAL>
	<OPEN_BRACKET> year = <INTEGER> <CLOSE_BRACKET> 
	{ System.out.println("year=" + year.image); }
}

void Volume(): {Token volume = null;} {
	<VOLUME><EQUAL>
	<OPEN_BRACKET> volume = <INTEGER> <CLOSE_BRACKET> 
	{ System.out.println("volume=" + volume.image); }
}

void Pages(): {Token pages = null;} {
	<PAGES><EQUAL>
	<OPEN_BRACKET> pages = <INTEGER> <CLOSE_BRACKET> 
	{ System.out.println("pages=" + pages.image); }
}

void Number(): {Token number = null;} {
	<NUMBER><EQUAL>
	<OPEN_BRACKET> number = <INTEGER> <CLOSE_BRACKET> 
	{ System.out.println("number=" + number.image); }
}

void Publisher(): {Token publisher = null;} {
	<PUBLISHER><EQUAL>
	<OPEN_BRACKET> publisher = <STRING> <CLOSE_BRACKET> 
	{ System.out.println("publisher=" + publisher.image); }
}