options {
	UNICODE_INPUT=true;
	LOOKAHEAD=1;
}

PARSER_BEGIN(Bibtex2Html)

	import org.json.JSONException;
	import org.json.JSONObject;
	import java.io.FileInputStream;
	import java.util.*;
	import Exceptions.*;
	import java.nio.file.*;
	import java.nio.charset.Charset;
	import java.io.IOException;

	public class Bibtex2Html { 

		private static Boolean strictMode;
		private static ArrayList<String> ids = new ArrayList<String>();
		private static ArrayList<Entry> entries = new ArrayList<Entry>();
		private static String style;

		public static void main(String args[]) throws Exception {

			//json string
			String json_str = readFile("./config.json", Charset.defaultCharset());
			JSONObject config = new JSONObject(json_str);

			style = config.getString("style");
			strictMode = config.getBoolean("strict");
			String templatesPath = config.getString("template_path");
			String outputHtmlFile = config.getString("output_file");
			String bibtexFile = config.getString("bibtexFile");

			System.out.println("Strict mode: " + strictMode);
			
			try {
				Bibtex2Html parser = new Bibtex2Html(new FileInputStream(bibtexFile));
				SimpleNode node = parser.Parse();
				node.dump("");
				parser.eval(node, "ids");
				parser.eval(node, "semantic");      
			} catch (Exception e) {
				System.out.println("\n############### F A T A L E X C E P T I O N ###############\n");
				System.out.println("A fatal exception was thrown.");
				System.out.println(e.getMessage());
				return;
			}

			String allEntries = "";
			String entryHtmlTemplate = readFile(templatesPath + style + ".html", Charset.defaultCharset());

        	for(Entry entry: entries) {
        		allEntries = allEntries + entry.replaceOnTemplate(entryHtmlTemplate);
        	}   

        	String masterTemplate = readFile(templatesPath + "template.html", Charset.defaultCharset());
        	masterTemplate = masterTemplate.replace("{{ENTRIES}}", allEntries);
			

			Path path = Paths.get(outputHtmlFile);
            if (!Files.exists( path.getParent() ))
            	Files.createDirectories( path.getParent() );
        	Files.write(path, masterTemplate.getBytes());
		}

		public static String readFile(String path, Charset encoding) throws IOException {
			byte[] encoded = Files.readAllBytes(Paths.get(path));
			return new String(encoded, encoding);
		}

		public static void setDefaults() {
			strictMode = false;
		}

		public void fetchIds(String type, SimpleNode node) {
			if(node.jjtGetChild(0).toString() == "Id") {
				SimpleNode idNode = (SimpleNode) node.jjtGetChild(0);
				this.ids.add(idNode.bibtexID);
			}
		}

		public Boolean verifyProperties(String type, SimpleNode node) throws Exception {
			String nodeId = "";

			//Get entry ID to pass to exceptions if needed
			if(node.jjtGetChild(0).toString() == "Id") {
				SimpleNode idNode = (SimpleNode) node.jjtGetChild(0);
				nodeId = idNode.bibtexID;
			}

			Validator validator = new Validator(ids, nodeId, type);
			Entry entry = new Entry(nodeId, type, style);
			entries.add(entry);
			entry.addProperty("id", nodeId);
			System.out.println(nodeId);

			//Loop over the contents tree and update the hashmap with the property status (FOUND)
			for (int i = 1; i < node.jjtGetNumChildren(); i++) {
				String property = node.jjtGetChild(i).jjtGetChild(0).toString().toLowerCase();
				SimpleNode contentNode = (SimpleNode) node.jjtGetChild(i).jjtGetChild(0);
				if(contentNode.jjtGetNumChildren() == 1) {
					contentNode = (SimpleNode) contentNode.jjtGetChild(0);
				}

				String content = contentNode.contentValue;

				//Validate pages
				if (property.equals("pages")) {
					SimpleNode pagesValue = (SimpleNode) node.jjtGetChild(i).jjtGetChild(0).jjtGetChild(0);
					try {
						validator.validatePages(pagesValue.contentValue);
					} catch(PagesOrderException e) {
						this.handleException(e);
					}
				}

				//Validate cross references
				if (property.equals("crossref")) {
					SimpleNode crossrefValue = (SimpleNode) node.jjtGetChild(i).jjtGetChild(0).jjtGetChild(0);

					try {
						validator.validateCrossRef(crossrefValue.contentValue);
					} catch(CrossRefException e) {
						this.handleException(e);
					}
				}

				//Validate Edition if exists
				if(property.equals("edition")) {
					SimpleNode edition = (SimpleNode) node.jjtGetChild(i).jjtGetChild(0).jjtGetChild(0);

					try {
						validator.validateEditionValue(edition.contentValue);
					} catch(NonOrdinalEditionException e) {
						this.handleException(e);
					}
				}

				try {
					validator.validateProperty(type, property);
					entry.addProperty(property, content);
				} catch(InvalidPropertyException e) {
					this.handleException(e);
				}
			}

			try {
				validator.validateRequiredProperties();
			} catch(MissingPropertyException e) {
				throw e;
			}

			return true;
		}

		public void handleException(Exception e) throws Exception {
			if(strictMode) {
				throw e;
			} else {
				System.out.println("WARNING: " + e.getMessage());
			}
		}

		public int eval(SimpleNode node, String option) throws Exception {
			if(node.jjtGetNumChildren() == 0)
				return 0;
			else if(node.jjtGetNumChildren() == 1) // only one child
				return this.eval((SimpleNode) node.jjtGetChild(0), option);
			else if(node.jjtGetNumChildren() == 2){
				if(
					node.jjtGetChild(0).toString().equals("EntryType")
					&& node.jjtGetChild(1).toString().equals("Contents")
				) {
					if(option.equals("ids")) {
						fetchIds(node.jjtGetChild(0).jjtGetChild(0).toString(), (SimpleNode) node.jjtGetChild(1));
					} else if(option.equals("semantic")) {
						verifyProperties(node.jjtGetChild(0).jjtGetChild(0).toString(), (SimpleNode) node.jjtGetChild(1));
					}					
				} else {
					this.eval((SimpleNode) node.jjtGetChild(0), option);
					this.eval((SimpleNode) node.jjtGetChild(1), option);

				}
			} else if(node.jjtGetNumChildren() > 2) {
				for(int i = 0; i<node.jjtGetNumChildren(); i++) {
					this.eval((SimpleNode) node.jjtGetChild(i), option);
				}
			}

			return 0;
		}

		
	}

PARSER_END(Bibtex2Html)

SKIP :
{
	"\t" | "\r"
}

TOKEN :
{
	< LF : "\n" >
	| < WS: ([" ","\r","\t"])+ >
	| < OPEN_BRACKET : "{" >
	| < CLOSE_BRACKET : "}" >
	| < QUOTE : "\"" >
	| < EQUAL : "=" >
	| < COMMA : "," >
	

	| < ARTICLE : "@article" >
	| < BOOK : "@book" >
	| < BOOKLET : "@booklet" >
	| < CONFERENCE : "@conference" >
	| < INBOOK : "@inbook" >
	| < INCOLLECTION : "@incollection" >
	| < INPROCEEDINGS : "@inproceedings" >
	| < MANUAL : "@manual" >
	| < MASTERSTHESIS : "@mastersthesis" >
	| < MISC : "@misc" >
	| < PHDTHESIS : "@phdthesis" >
	| < PROCEEDINGS : "@proceedings" >
	| < TECHREPORT : "@techreport" >
	| < UNPUBLISHED : "@unpublished" >

	| < TITLE : "title" >
	| < AUTHOR : "author" >
	| < JOURNAL : "journal" >
	| < YEAR : "year" >
	| < VOLUME : "volume" >
	| < NUMBER : "number" >
	| < PAGES : "pages" >
	| < MONTH : "month" > 
	| < NOTE : "note" > 
	| < KEY : "key" >
	| < EDITOR : "editor" >
	| < PUBLISHER : "publisher" >
	| < SERIES : "series" >
	| < ADDRESS : "address" >
	| < EDITION : "edition" >
	| < HOWPUBLISHED : "howpublished" >
	| < CHAPTER : "chapter" > 
	| < TYPE : "type" >
	| < BOOKTITLE : "booktitle" >
	| < ORGANIZATION : "organization" >
	| < SCHOOL : "school" >
	| < INSTITUTION : "institution" >
	| < ANNOTE : "annote" >
	| < CROSSREF : "crossref" >

	| < INTEGER : (["-","+"])?(["0" - "9"])+ >
	| < PAGESNUMBERS : (["0" - "9"])+"--"(["0" - "9"])+ >
	| < WORD : (["a" - "z" , "A"-"Z" , "0" - "9", "-", ":"] | <SPECIAL>)+ >
	
	// \, 47 = / , u2018 = ‘ , u2019 = ’ , 126 = , u002E = . , 61 =  , u005E = ^
	| < SPECIAL : (["\'", "\"", "\u007E", "\\", "\47", "\u2018", "\u2019", "\126", "\u002E", "\61", "\u005E", "\u0060"])+ >
	| < STRING : ((<WORD>)+((" "|", ")+<WORD>)*)+ >
	| < BETWEENBRACKETS : ( <OPEN_BRACKET> (<WORD>|<STRING>)* <CLOSE_BRACKET> )+ >
	| < BETWEENQUOTES : ( <QUOTE> (<WORD>|<STRING>)* <QUOTE> )+ >

	| < TEXT : (
		( <STRING> | <WORD> | <WS> )+ ( <BETWEENBRACKETS> )+ ( <STRING> | <WORD>  | <WS> )+
		)+  >

}

SimpleNode Parse(): {} {
	(ParseEntry())+
	{ return jjtThis;}
}

void ParseEntry(): {} {
	try {
		EntryType()
		Contents()
		(<LF>)*
	} catch(ParseException e) {
		System.out.println("\n##### An error occurred while parsing the input file. #####\n");
		System.out.println(e.getMessage() + "\n");
	} catch(TokenMgrError e) {
		System.out.println("\n##### An error occurred while parsing the input file. #####\n");
		System.out.println(e.getMessage() + "\n");
	}
}

void EntryType(): {} {
	(
		Article()
		| Book()
		| Booklet()
		| Conference()
		| Inbook()
		| Incollection()
		| Inproceedings()
		| Manual() 
		| Mastersthesis()
		| Misc()
		| Phdthesis()
		| Proceedings()
		| Techreport()
		| Unpublished()
	)
}

void Article(): {} {
	<ARTICLE>
}

void Book(): {} {
	<BOOK>
}
void Booklet(): {} {
	<BOOKLET>
}

void Conference(): {} {
	<CONFERENCE>
}

void Inbook(): {} {
	<INBOOK>
}

void Incollection(): {} {
	<INCOLLECTION>
}

void Inproceedings(): {} {
	<INPROCEEDINGS>
}

void Manual(): {} {
	<MANUAL>
}

void Mastersthesis(): {} {
	 <MASTERSTHESIS>
}

void Misc(): {} {
	<MISC>
}
void Phdthesis(): {} {
	<PHDTHESIS>
}

void Proceedings(): {} {
	<PROCEEDINGS>
}

void Techreport(): {} {
	<TECHREPORT>
}

void Unpublished(): {} {
	<UNPUBLISHED>
}

void Contents(): {} {	
	<OPEN_BRACKET>
		Id()
		(
			[<WS>]
			(
				 <COMMA> <LF>
				| Property()
			)
		)*
		[<LF>]
	<CLOSE_BRACKET>
}

void Property(): {} {
	(	Title()
		| Author()
		| Journal()
		| Volume()
		| Number()
		| Pages()
		| Year()
		| Publisher()
		| Month()
		| Note()
		| Key()
		| Editor()
		| Series()
		| Address()
		| Edition()
		| HowPublished()
		| Chapter()
		| Type()
		| BookTitle()
		| Organization()
		| School()
		| Institution()
		| Annote()
		| Crossref()
	)
}


void Id(): {Token id = null;} {
	(id = <WORD> | id = <STRING>)
	{ System.out.println("id=" + id.image); }
	{jjtThis.bibtexID = id.image;}
}


/* * * * * * * * * * * *
 * TITLE               * 
 * * * * * * * * * * * */

void Title(): {Token title = null;} {
	<TITLE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
			(title = <WORD> | title = <STRING> | title = <TEXT>)
			[<WS>] <CLOSE_BRACKET>
		| (title = <WORD> | title = <STRING> | title = <TEXT>)
		| title = btwBrackets()
	)
	{ jjtThis.contentValue = title.image; }
}

void Month(): { Token month = null;} {
	<MONTH> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(month = <INTEGER> )
		[<WS>] <CLOSE_BRACKET>
		| (month = <INTEGER>)
	)
	{ jjtThis.contentValue = month.image + "";  }
}

/*
First
Last
von
jr

First von Last
von Last, First
von Last, Jr ,First
*/
void Author(): {Token author = null;} {
	<AUTHOR> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(author =  <WORD> | author = <STRING> | author = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| 
		(author =  <WORD> | author = <STRING> | author = <TEXT>)
		|
		author = btwBrackets()
	)
	{ jjtThis.contentValue = author.image + ""; }
}

void Journal(): {Token journal = null;} {
	<JOURNAL> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		(journal = <WORD> | journal = <STRING> | journal = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| (journal = <WORD> | journal = <STRING> | journal = <TEXT>)
		| journal = btwBrackets()
	)
	{ jjtThis.contentValue = journal.image + ""; }
}

void Year(): {Token year = null;} {
	<YEAR> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] year = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| year = integerNumber()
		| year = btwBrackets()
	)
	{ jjtThis.contentValue = year.image + ""; }
}

void Volume(): {Token volume = null;} {
	<VOLUME> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] volume = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| volume = integerNumber()
		| volume = btwBrackets()
	)
	{ jjtThis.contentValue = volume.image + ""; }
}

void Pages(): {Token pages = null;} {

	<PAGES> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] pages = <PAGESNUMBERS> [<WS>] <CLOSE_BRACKET>
		| pages = <PAGESNUMBERS>
		| pages = btwBrackets()
	)
	{ jjtThis.contentValue = pages.image + ""; }
}

void Number(): {Token number = null;} {
	<NUMBER> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>] number = <INTEGER> [<WS>] <CLOSE_BRACKET>
		| number = <INTEGER>
		| number = btwBrackets()
	)
	{ jjtThis.contentValue = number.image + ""; }
}

void Publisher(): {Token publisher = null;} {
	<PUBLISHER> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( publisher = <WORD> | publisher = <STRING> | publisher = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( publisher =  <WORD> | publisher = <STRING> | publisher = <TEXT>)
		| publisher = btwBrackets()
	)
	{ jjtThis.contentValue = publisher.image + ""; }
}

void Note(): {Token note = null;} {
	<NOTE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( note = <WORD> | note = <STRING> | note = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( note =  <WORD> | note = <STRING> | note = <TEXT>)
		| note = btwBrackets()
	)
	{ jjtThis.contentValue = note.image + ""; }
}

void Key(): { Token key = null; } {
	<KEY> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( key = <WORD> | key = <STRING> | key = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( key =  <WORD> | key = <STRING> | key = <TEXT>)
		| key = btwBrackets()
	)
	{ jjtThis.contentValue = key.image + ""; }
}

void Editor(): { Token editor = null; } {
	<EDITOR> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( editor = <WORD> | editor = <STRING> | editor = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( editor =  <WORD> | editor = <STRING> | editor = <TEXT>)
		| editor = btwBrackets()
	)
	{ jjtThis.contentValue = editor.image + ""; }
}

void Series(): { Token series = null; } {
	<SERIES> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( series = <WORD> | series = <STRING> | series = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( series =  <WORD> | series = <STRING> | series = <TEXT>)
		| series = btwBrackets()
	)
	{ jjtThis.contentValue = series.image + ""; }
}

void Address(): { Token address = null; } {
	<ADDRESS> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( address = <WORD> | address = <STRING> | address = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( address =  <WORD> | address = <STRING> | address = <TEXT>)
		| address = btwBrackets()
	)
	{ jjtThis.contentValue = address.image + ""; }
}

void Edition(): { Token edition = null; } {
	<EDITION> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( edition = <WORD> | edition = <STRING> | edition = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( edition =  <WORD> | edition = <STRING> | edition = <TEXT>)
		| edition = btwBrackets()
	)
	{ jjtThis.contentValue = edition.image + ""; }
}

void HowPublished(): { Token howPublished = null; } {
	<HOWPUBLISHED> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( howPublished = <WORD> | howPublished = <STRING> | howPublished = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( howPublished =  <WORD> | howPublished = <STRING> | howPublished = <TEXT>)
		| howPublished = btwBrackets()
	)
	{ jjtThis.contentValue = howPublished.image + ""; }
}

void Chapter(): { Token chapter = null; } {
	<CHAPTER> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( chapter = <WORD> | chapter = <STRING> | chapter = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( chapter =  <WORD> | chapter = <STRING> | chapter = <TEXT>)
		| chapter = btwBrackets()
	)
	{ jjtThis.contentValue = chapter.image + ""; }
}

void Type(): { Token type = null; } {
	<TYPE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( type = <WORD> | type = <STRING> | type = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( type =  <WORD> | type = <STRING> | type = <TEXT>)
		| type = btwBrackets()
	)
	{ jjtThis.contentValue = type.image + ""; }
}

void BookTitle(): { Token bookTitle = null; } {
	<BOOKTITLE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( bookTitle = <WORD> | bookTitle = <STRING> | bookTitle = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( bookTitle =  <WORD> | bookTitle = <STRING> | bookTitle = <TEXT>)
		| bookTitle = btwBrackets()
	)
	{ jjtThis.contentValue = bookTitle.image + ""; }
}

void Organization(): { Token organization = null; } {
	<ORGANIZATION> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( organization = <WORD> | organization = <STRING> | organization = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( organization =  <WORD> | organization = <STRING> | organization = <TEXT>)
		| organization = btwBrackets()
	)
	{ jjtThis.contentValue = organization.image + ""; }
}

void School(): { Token school = null; } {
	<SCHOOL> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( school = <WORD> | school = <STRING> | school = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( school =  <WORD> | school = <STRING> | school = <TEXT>)
		| school = btwBrackets()
	)
	{ jjtThis.contentValue = school.image + ""; }
}

void Institution(): { Token institution = null; } {
	<INSTITUTION> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( institution = <WORD> | institution = <STRING> | institution = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( institution =  <WORD> | institution = <STRING> | institution = <TEXT>)
		| institution = btwBrackets()
	)
	{ jjtThis.contentValue = institution.image + ""; }
}

void Annote(): { Token annote = null; } {
	<ANNOTE> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( annote = <WORD> | annote = <STRING> | annote = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( annote =  <WORD> | annote = <STRING> | annote = <TEXT>)
		| annote = btwBrackets()
	)
	{ jjtThis.contentValue = annote.image + ""; }
}

void Crossref(): { Token crossref = null; } {
	<CROSSREF> [<WS>] <EQUAL> [<WS>]
	(
		<OPEN_BRACKET> [<WS>]
		( crossref = <WORD> | crossref = <STRING> | crossref = <TEXT>)
		[<WS>] <CLOSE_BRACKET>
		| ( crossref =  <WORD> | crossref = <STRING> | crossref = <TEXT>)
		| crossref = btwBrackets()
	)
	{ jjtThis.contentValue = crossref.image + ""; }
}



/*
void getText(): {} {
	<STRING> [<OPEN_BRACKET>(<STRING>|<WORD>)<CLOSE_BRACKET>]
}
*/

Token btwBrackets(): {} {
	{Token t = new Token();}
	(t = <BETWEENBRACKETS>
	| t = <BETWEENQUOTES>)
	{jjtThis.contentValue = t.image; return t;}
}

Token integerNumber(): {} {
	{Token t = new Token();}
	t = <INTEGER>
	{jjtThis.contentValue = t.image + ""; return t;}
}