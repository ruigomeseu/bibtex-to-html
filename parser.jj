/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/PARSER_BEGIN(Bibtex2Html)

	public class Bibtex2Html/*@bgen(jjtree)*/implements Bibtex2HtmlTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTBibtex2HtmlState jjtree = new JJTBibtex2HtmlState();

/*@egen*/
		public static void main(String args[]) throws ParseException {

			Bibtex2Html parser = new Bibtex2Html(System.in);
			SimpleNode node = parser.Parse();
			node.dump("");
		}
	}

PARSER_END(Bibtex2Html)

SKIP :
{
	" " | "\t" | "\r"
}

TOKEN :
{
	< INTEGER : (["0" - "9"])+ >
	| < LF : "\n" >
	| < OPEN_BRACKET : "{" >
	| < CLOSE_BRACKET : "}" >
	| < QUOTE : "\"" >
	| < EQUAL : "=" >
	| < COMMA : "," >

	| < ARTICLE : "@article" >
	| < BOOK : "@book" >
	| < BOOKLET : "@booklet" >
	| < CONFERENCE : "@conference" >
	| < INBOOK : "@inbook" >
	| < INCOLLECTION : "@incollection" >
	| < INPROCEEDINGS : "@inproceedings" >
	| < MANUAL : "@manual" >
	| < MASTERSTHESIS : "@mastersthesis" >
	| < MISC : "@misc" >
	| < PHDTHESIS : "@phdthesis" >
	| < PROCEEDINGS : "@proceedings" >
	| < TECHREPORT : "@techreport" >
	| < UNPUBLISHED : "@unpublished" >

	| < TITLE : "title" >
	| < AUTHOR : "author" >
	| < JOURNAL : "journal" >
	| < YEAR : "year" >
	| < VOLUME : "volume" >
	| < NUMBER : "number" >
	| < PAGES : "pages" >
	| < MONTH : "month" > 
	| < NOTE : "note" > 
	| < KEY : "key" >
	| < EDITOR : "editor" >
	| < PUBLISHER : "publisher" >
	| < SERIES : "series" >
	| < ADDRESS : "address" >
	| < EDITION : "edition" >
	| < HOWPUBLISHED : "howpublished" >
	| < CHAPTER : "chapter" > 
	| < TYPE : "type" >
	| < BOOKTITLE : "booktitle" >
	| < ORGANIZATION : "organization" >
	| < SCHOOL : "school" >
	| < INSTITUTION : "institution" >
	| < ANNOTE : "anote" >
	| < CROSSREF : "crossref" >
}

SimpleNode Parse(): {/*@bgen(jjtree) Parse */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Parse */
        try {
/*@egen*/
	Article() <LF>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Article(): {/*@bgen(jjtree) Article */
  SimpleNode jjtn000 = new SimpleNode(JJTARTICLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Article */
        try {
/*@egen*/
	<ARTICLE> <OPEN_BRACKET> <CLOSE_BRACKET>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}